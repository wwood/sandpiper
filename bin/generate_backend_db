#!/usr/bin/env python3

###############################################################################
#
#    Copyright (C) 2021 Ben Woodcroft
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

__author__ = "Ben Woodcroft"
__copyright__ = "Copyright 2020"
__credits__ = ["Ben Woodcroft"]
__license__ = "GPL3"
__maintainer__ = "Ben Woodcroft"
__email__ = "benjwoodcroft near gmail.com"
__status__ = "Development"

import argparse
import logging
import sys
import os
import shutil
import csv
import subprocess
import tempfile

import extern

sys.path = [os.path.join(os.path.dirname(os.path.realpath(__file__)),'..')] + sys.path

if __name__ == '__main__':
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument('--debug', help='output debug information', action="store_true")
    #parent_parser.add_argument('--version', help='output version information and quit',  action='version', version=repeatm.__version__)
    parent_parser.add_argument('--quiet', help='only output errors', action="store_true")

    parent_parser.add_argument('--singlem-db', help='sqlite file from a singlem db', required=True)
    parent_parser.add_argument('--condensed-otu-table', help='condensed OTU table input', required=True)
    parent_parser.add_argument('-o', help='sqlite3 file to generate', required=True)

    args = parent_parser.parse_args()

    # Setup logging
    if args.debug:
        loglevel = logging.DEBUG
    elif args.quiet:
        loglevel = logging.ERROR
    else:
        loglevel = logging.INFO
    logging.basicConfig(level=loglevel, format='%(asctime)s %(levelname)s: %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')

    # Copy file over
    logging.info("Copying SQLite file")
    sqlite_db_path = args.o
    shutil.copy(args.singlem_db, sqlite_db_path)

    # Add new condensed OTU table table
    logging.info("Loading condensed data")
    extern.run('sqlite3 {}'.format(sqlite_db_path), stdin= \
    "CREATE TABLE condensed_profiles (id INTEGER PRIMARY KEY AUTOINCREMENT,"
        " sample_name text, coverage float, taxonomy text);\n")
    


    count = 0
    with open(args.condensed_otu_table, 'r') as csvfile_in:
        reader = csv.reader(csvfile_in, delimiter="\t")

        # Couldn't get this to work with named pipes, guess it must be possible somehow.
        with tempfile.NamedTemporaryFile() as tf:
            first = True
            for row in reader:
                if first:
                    first = False
                    continue
                tf.write(("\t".join([str(count+1),row[0],row[1],row[2]])+"\n").encode())
                count += 1
            logging.info("Wrote {} rows to temp file".format(count))
            tf.flush()

            proc = subprocess.Popen(['bash','-c','sqlite3 {}'.format(sqlite_db_path)],
                stdin=subprocess.PIPE,
                stdout=None,
                stderr=subprocess.PIPE,
                universal_newlines=True)

            print('.separator "\\t"\n', file=proc.stdin)
            print('.import {} condensed_profiles\n'.format(tf.name), file=proc.stdin)

            import IPython; IPython.embed()
            
            proc.stdin.close()
            proc.wait()
            if proc.returncode != 0:
                raise Exception("condensed profiles import command returned non-zero exit status %i.\n"\
                    "STDERR was: %s" % (
                        proc.returncode, proc.stderr.read()))      
            logging.info("Imported {} condensed lines".format(count))

    logging.warn("TODO: Add indexes")

    logging.info("Finished")
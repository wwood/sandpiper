#!/usr/bin/env python3

###############################################################################
#
#    Copyright (C) 2021 Ben Woodcroft
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

__author__ = "Ben Woodcroft"
__copyright__ = "Copyright 2020"
__credits__ = ["Ben Woodcroft"]
__license__ = "GPL3"
__maintainer__ = "Ben Woodcroft"
__email__ = "benjwoodcroft near gmail.com"
__status__ = "Development"

import argparse
from email import header
import logging
import sys
import os
import json
import csv

from singlem.sequence_database import SequenceDatabase
from singlem.condense import WordNode
from singlem.otu_table_entry import OtuTableEntry
from singlem.otu_table import OtuTable

sys.path = [os.path.join(os.path.dirname(os.path.realpath(__file__)),'..')] + sys.path

if __name__ == '__main__':
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument('--debug', help='output debug information', action="store_true")
    #parent_parser.add_argument('--version', help='output version information and quit',  action='version', version=repeatm.__version__)
    parent_parser.add_argument('--quiet', help='only output errors', action="store_true")

    parent_parser.add_argument('--condensed-otu-table', help='condensed OTU table input', required=True)

    # parser = argparse.ArgumentParser(parents=[parent_parser])
    # subparsers = parser.add_subparsers(title="Sub-commands", dest='subparser_name')

    # cluster_description = 'Cluster bins and assembled contigs'
    # cluster_parser = subparsers.add_parser('cluster')
    # cluster_parser.add_argument(
    #     '--bin_directories', nargs='+', metavar='DIR [DIR ..]',
    #     help="Directories containing FASTA files of bins", required=True)

    args = parent_parser.parse_args()

    # Setup logging
    if args.debug:
        loglevel = logging.DEBUG
    elif args.quiet:
        loglevel = logging.ERROR
    else:
        loglevel = logging.INFO
    logging.basicConfig(level=loglevel, format='%(asctime)s %(levelname)s: %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')

    # Generate WordNode graph from CondensedOtuTable, which is ordered by
    # sample, then increasing specificity of taxonomy
    with open(args.condensed_otu_table) as f:
        current_sample = None
        root = WordNode(None, 'Root')
        taxons_to_wordnode = {root.word: root}
        reader = csv.reader(f, delimiter="\t")
        headers = next(reader)
        for row in reader:
            sample = row[0],
            if current_sample is None:
                current_sample = sample
            elif current_sample != sample:
                break # FIXME

            coverage = float(row[1])
            taxonomy = row[2]
            taxons = taxonomy.split('; ')
            logging.debug("Analysing taxonomy %s", taxonomy)
            
            last_taxon = root
            wn = None
            for (i, tax) in enumerate(taxons):
                if tax not in taxons_to_wordnode:
                    wn = WordNode(last_taxon, tax)
                    logging.debug("Adding tax %s with prev %s", tax, last_taxon.word)
                    last_taxon.children[tax] = wn
                    taxons_to_wordnode[tax] = wn #TODO: Problem when there is non-unique labels? Require full taxonomy used?
                else:
                    last_taxon = taxons_to_wordnode[tax]
            wn.coverage = coverage

    # Print JSON
    #
    #   tree:  {
    #   "name": "flare",
    #     "children": [
    #       {
    #         "name": "analytics",
    #         "children": [
    #           {
    #             "name": "cluster",
    #             "children": [
    #               { "name": "AgglomerativeCluster", "size": 3938 },
    #               { "name": "CommunityStructure", "size": 3812 },
    #               { "name": "HierarchicalCluster", "size": 6714 },
    #               { "name": "MergeEdge", "size": 743 }
    #             ]
    def wordnode_json(wordnode):
        j = {
            'name': wordnode.word,
            'size': wordnode.coverage
        }
        if len(wordnode.children.values()) > 0:
            j['children'] = [wordnode_json(child) for child in wordnode.children.values()]
        return j

    print(json.dumps(wordnode_json(root), indent=2))
    

#!/usr/bin/env python3

###############################################################################
#
#    Copyright (C) 2021 Ben Woodcroft
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

__author__ = "Ben Woodcroft"
__copyright__ = "Copyright 2020"
__credits__ = ["Ben Woodcroft"]
__license__ = "GPL3"
__maintainer__ = "Ben Woodcroft"
__email__ = "benjwoodcroft near gmail.com"
__status__ = "Development"

import argparse
import logging
import sys
import os

import requests
import xml.etree.ElementTree as ET

sys.path = [os.path.join(os.path.dirname(os.path.realpath(__file__)),'..')] + sys.path

if __name__ == '__main__':
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument('--debug', help='output debug information', action="store_true")
    #parent_parser.add_argument('--version', help='output version information and quit',  action='version', version=repeatm.__version__)
    parent_parser.add_argument('--quiet', help='only output errors', action="store_true")

    # parser = argparse.ArgumentParser(parents=[parent_parser])
    # subparsers = parser.add_subparsers(title="Sub-commands", dest='subparser_name')

    # cluster_description = 'Cluster bins and assembled contigs'
    # cluster_parser = subparsers.add_parser('cluster')
    # cluster_parser.add_argument(
    #     '--bin_directories', nargs='+', metavar='DIR [DIR ..]',
    #     help="Directories containing FASTA files of bins", required=True)

    args = parent_parser.parse_args()

    # Setup logging
    if args.debug:
        loglevel = logging.DEBUG
    elif args.quiet:
        loglevel = logging.ERROR
    else:
        loglevel = logging.INFO
    logging.basicConfig(level=loglevel, format='%(asctime)s %(levelname)s: %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')

    # logging.info("{} version {}".format(os.path.basename(__file__), __version__))

    # esearch sra using usehistory for
    search_term = '"METAGENOMIC" NOT amplicon[All Fields] AND "platform illumina"[Properties] AND cluster_public[prop]'
    retmax = 100 # TODO: Relax this
    logging.info("Running esearch ..")
    res = requests.get(
        url="https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi", 
        params={
            "db": "sra",
            "term": search_term,
            "usehistory": True,
            "tool": "sandpiper", 
            "email": "wwood@github.com",
            "retmax": retmax,
            },
        )

    # TODO: Ensure res.ok
    # TODO: Return null from esearch since results aren't used
    root = ET.fromstring(res.text)
    import IPython; IPython.embed()

    # efetch XML in batches of 1000 say. Log progress.

#!/usr/bin/env python3

###############################################################################
#
#    Copyright (C) 2021 Ben Woodcroft
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

__author__ = "Ben Woodcroft"
__copyright__ = "Copyright 2020"
__credits__ = ["Ben Woodcroft"]
__license__ = "GPL3"
__maintainer__ = "Ben Woodcroft"
__email__ = "benjwoodcroft near gmail.com"
__status__ = "Development"

import argparse
import logging
import sys
import os

import requests
import xml.etree.ElementTree as ET

sys.path = [os.path.join(os.path.dirname(os.path.realpath(__file__)),'..')] + sys.path

if __name__ == '__main__':
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument('--debug', help='output debug information', action="store_true")
    #parent_parser.add_argument('--version', help='output version information and quit',  action='version', version=repeatm.__version__)
    parent_parser.add_argument('--quiet', help='only output errors', action="store_true")

    # parser = argparse.ArgumentParser(parents=[parent_parser])
    # subparsers = parser.add_subparsers(title="Sub-commands", dest='subparser_name')

    # cluster_description = 'Cluster bins and assembled contigs'
    # cluster_parser = subparsers.add_parser('cluster')
    # cluster_parser.add_argument(
    #     '--bin_directories', nargs='+', metavar='DIR [DIR ..]',
    #     help="Directories containing FASTA files of bins", required=True)

    args = parent_parser.parse_args()

    # Setup logging
    if args.debug:
        loglevel = logging.DEBUG
    elif args.quiet:
        loglevel = logging.ERROR
    else:
        loglevel = logging.INFO
    logging.basicConfig(level=loglevel, format='%(asctime)s %(levelname)s: %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')

    # logging.info("{} version {}".format(os.path.basename(__file__), __version__))

    # esearch sra using usehistory for
    search_term = '"METAGENOMIC" NOT amplicon[All Fields] AND "platform illumina"[Properties] AND cluster_public[prop]'
    retmax = 100
    logging.info("Running esearch ..")
    res = requests.get(
        url="https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi", 
        params={
            "db": "sra",
            "term": search_term,
            "usehistory": 'y',
            "tool": "sandpiper", 
            "email": "wwood@github.com",
            "retmax": retmax,
            # "rettype": "count", # when only returning the count, WebEnv etc is
            # missing. So we must pointlessly download the list of IDs. But, we
            # can iterate the efetch beyond the retmax, so it matters not. No
            # chunking of esearch necessary.
            },
        )
    if not res.ok:
        raise Exception("HTTP Failure when requesting esearch")

    # TODO: Return null from esearch since results aren't used
    root = ET.fromstring(res.text)

    webenv = root.find('WebEnv')
    if webenv is None:
        raise Exception("Unexpectedly could not find WebEnv XML element")
    webenv = webenv.text
    logging.debug("Found webenv {}".format(webenv))

    query_key = root.find('QueryKey')
    if query_key is None:
        raise Exception("Unexpectedly could not find QueryKey XML element")
    query_key = query_key.text

    esearch_count = root.find('Count')
    if esearch_count is None:
        raise Exception("Unexpectedly could not find Count XML element")
    esearch_count = int(esearch_count.text)
    logging.info("Found {} results through search".format(esearch_count))
    if esearch_count <= 0:
        raise Exception("Unexpectedly found {} count results through search".format(esearch_count))

    # efetch XML in batches of 1000 say. Log progress.
    retstart = 1
    batch_size = 100
    retmax = batch_size
    while retstart <= esearch_count:
        logging.info("Fetching records starting at {} ..".format(retstart))
        res = requests.get(
            url="https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi", 
            params={
                "db": "sra",
                "retstart": retstart,
                "retmax": retmax,
                "query_key": query_key,
                "webenv": webenv,
                "tool": "sandpiper", 
                "email": "wwood@github.com",
                "rettype": "xml",               
                },
            )
        if not res.ok:
            raise Exception("HTTP Failure when requesting efetch: {}".format(res))
        retstart += batch_size

        root = ET.fromstring(res.text)
        packages = list(root)
        for package in packages:
            # d2 = d[Platform=='ILLUMINA' & LibrarySource=='METAGENOMIC' & LibrarySelection=='RANDOM'][bases>100e6 & bases<200e9]
        
            # bases
            passable_run_ids = []
            run_set = package.find('RUN_SET')
            for child in run_set:
                run_id = child.attrib['accession']
                bases = int(child.attrib['total_bases'])
                size = int(child.attrib['size'])
                if bases < 100e6 or bases > 200e9:
                    logging.debug("Num bases outside range for {}: {}".format(run_id, bases))
                    continue
                else:
                    passable_run_ids.append((run_id, bases, size))
            if len(passable_run_ids) == 0:
                continue

            # Platform = ILLUMINA means an ILLUMINA entry in <EXPERIMENT_SET><EXPERIMENT>:
            #     <PLATFORM>
            #       <ILLUMINA>
            #         <INSTRUMENT_MODEL>Illumina HiSeq 2000</INSTRUMENT_MODEL>
            #       </ILLUMINA>
            #     </PLATFORM>
            illumina = False
            for platform in package.find('EXPERIMENT').find('PLATFORM'):
                if platform.tag == 'ILLUMINA':
                    illumina = True

            # LibrarySource and Library selection in <EXPERIMENT_SET><EXPERIMENT>:
            #       <LIBRARY_DESCRIPTOR>
            #         <LIBRARY_NAME>C6s</LIBRARY_NAME>
            #         <LIBRARY_STRATEGY>WGS</LIBRARY_STRATEGY>
            #         <LIBRARY_SOURCE>METAGENOMIC</LIBRARY_SOURCE>
            #         <LIBRARY_SELECTION>RANDOM</LIBRARY_SELECTION>
            descriptor = package.find('EXPERIMENT').find('DESIGN').find('LIBRARY_DESCRIPTOR')
            if descriptor.find('LIBRARY_SOURCE').text != 'METAGENOMIC':
                logging.debug("Not metagenomic library source: {}".format(run_id))
                continue
            if descriptor.find('LIBRARY_SELECTION').text != 'RANDOM':
                logging.debug("Not RANDOM library selection: {}".format(run_id))
                continue

            for ((run_id, bases, size)) in passable_run_ids:
                print("\t".join([
                    run_id,
                    str(int(float(size)/1024/1024)),
                    str(int(float(bases)/1000/1000/1000)),
                ]))


        
        

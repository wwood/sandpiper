#!/usr/bin/env python3

###############################################################################
#
#    Copyright (C) 2021 Ben Woodcroft
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

__author__ = "Ben Woodcroft"
__copyright__ = "Copyright 2022"
__credits__ = ["Ben Woodcroft"]
__license__ = "GPL3"
__maintainer__ = "Ben Woodcroft"
__email__ = "benjwoodcroft near gmail.com"
__status__ = "Development"

import argparse
import logging
import sys
import os
import csv

sys.path = [os.path.join(os.path.dirname(os.path.realpath(__file__)),'..')] + sys.path

class Node:
    def __init__(self, name):
        self.name = name
        self.children = []

if __name__ == '__main__':
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument('--debug', help='output debug information', action="store_true")
    #parent_parser.add_argument('--version', help='output version information and quit',  action='version', version=repeatm.__version__)
    parent_parser.add_argument('--quiet', help='only output errors', action="store_true")

    parent_parser.add_argument('--json-gz-file-list', help='File containing paths to singlem result files', required=True)

    args = parent_parser.parse_args()

    # Setup logging
    if args.debug:
        loglevel = logging.DEBUG
    elif args.quiet:
        loglevel = logging.ERROR
    else:
        loglevel = logging.INFO
    logging.basicConfig(level=loglevel, format='%(asctime)s %(levelname)s: %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')

    # logging.info("{} version {}".format(os.path.basename(__file__), __version__))

    # Read in json.gz files
    # create dict of basenames to full paths
    basename_to_full_paths = {}
    with open(args.json_gz_file_list) as f:
        for l in f:
            full = l.strip()
            base = os.path.basename(full)
            if base not in basename_to_full_paths:
                basename_to_full_paths[base] = []
            basename_to_full_paths[base].append(full)
    logging.info(f"Read {len(basename_to_full_paths)} basenames")

    # iterate dict, when there are multiple choose the one that is largest in size
    for (base, full) in basename_to_full_paths.items():
        if len(full) > 1:
            logging.debug(f"{base} has {len(full)} files: {' '.join(full)}")
            largest_file = max(full, key=os.path.getsize)
            logging.debug(f"Choosing {largest_file}")
            print(largest_file)
        else:
            print(full[0])
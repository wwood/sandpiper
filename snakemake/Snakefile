
rule all:
    input:
        '{test_or_prod}/{version}/backend_db/done'.format(
            test_or_prod=config['TEST_OR_PROD'],
            version=config['SANDPIPER_VERSION'])

rule gather_kingfisher_metadata:
    input:
        accessions=config['ACCESSIONS_FILE']
    output:
        metadata='{test_or_prod}/kingfisher_metadata/{date}/kingfisher_metadata.csv'.format(
            date=config['KINGFISHER_METADATA_DATE'],
            test_or_prod=config['TEST_OR_PROD']),
        done='{test_or_prod}/kingfisher_metadata/{date}/done'.format(
            date=config['KINGFISHER_METADATA_DATE'],
            test_or_prod=config['TEST_OR_PROD'])
    conda:
        'envs/kingfisher.yml'
    shell:
        "kingfisher annotate -f tsv --all-columns --run-identifiers-list {input.accessions} -o {output.metadata} && " \
        "touch {output.done}"

rule gather_bioproject_pubs:
    output:
        done='{test_or_prod}/gather_bioproject_pubs/{date}/done'.format(
            date=config['BIOPROJECT_METADATA_DATE'],
            test_or_prod=config['TEST_OR_PROD'])
    shell:
        "../backend/bin/bioproject_metadata.py --meta {config[JSON_METADATA_FILES]} --output-directory {config[TEST_OR_PROD]}/gather_bioproject_pubs/{config[BIOPROJECT_METADATA_DATE]} && " \
        "touch {output.done}"

rule process_bioproject_pubs:
    input:
        '{test_or_prod}/gather_bioproject_pubs/{date}/done'.format(
            date=config['BIOPROJECT_METADATA_DATE'],
            test_or_prod=config['TEST_OR_PROD'])
    output:
        bioproject_publications='{test_or_prod}/process_bioproject_pubs/{date}/bioproject_publications.csv'.format(
            date=config['BIOPROJECT_METADATA_DATE'],
            test_or_prod=config['TEST_OR_PROD']),
        done='{test_or_prod}/process_bioproject_pubs/{date}/done'.format(
            date=config['BIOPROJECT_METADATA_DATE'],
            test_or_prod=config['TEST_OR_PROD'])
    shell:
        "../backend/bin/bioproject_metadata_process.py --xml-directory {config[TEST_OR_PROD]}/gather_bioproject_pubs/{config[BIOPROJECT_METADATA_DATE]} > {output.bioproject_publications} && " \
        "touch {output.done}"

rule generate_backend_db:
    input:
        bioproject_publications='{test_or_prod}/process_bioproject_pubs/{date}/bioproject_publications.csv'.format(
            date=config['BIOPROJECT_METADATA_DATE'],
            test_or_prod=config['TEST_OR_PROD']),
        kingfisher_metadata='{test_or_prod}/kingfisher_metadata/{date}/kingfisher_metadata.csv'.format(
            date=config['KINGFISHER_METADATA_DATE'],
            test_or_prod=config['TEST_OR_PROD'])
    log:
        '{test_or_prod}/{version}/backend_db/start_backend_db2.log'.format(
            test_or_prod=config['TEST_OR_PROD'],
            version=config['SANDPIPER_VERSION'])
    output:
        '{test_or_prod}/{version}/backend_db/start_done'.format(
            test_or_prod=config['TEST_OR_PROD'],
            version=config['SANDPIPER_VERSION'])
    conda:
        '../sandpiper.yml'
    shell:
        'export SNAKE_WORKING_DIR=`pwd` && ' \
        'cd ../backend && ' \
        'mkdir -p /data1/woodcrob && ' \
        'PYTHONPATH=~/git/singlem TMPDIR=. ./bin/generate_backend_db --stage start --singlem-db ../test/data/5_s3_runs/5_s3_runs.sdb/otus.sqlite3 --condensed-otu-table {config[CONDENSED_OTU_TABLE]} -o /data1/woodcrob/sandpiper_{config[SANDPIPER_VERSION]}.sqlite3 --metadata-json-files {config[JSON_METADATA_FILES]} --run-blacklist db/metagenome_assembly_acc_list.csv --host-predictions-tsv {config[HOST_OR_NOT_PREDICTION_GZ]} --kingfisher-annotate-path-list <(echo $SNAKE_WORKING_DIR/{input.kingfisher_metadata}) --otu-table <(pigz -cd {config[OTU_TABLE]}) --bioproject-associated-publications $SNAKE_WORKING_DIR/{input.bioproject_publications} --smf-file {config[SMF_FILE]} 2> $SNAKE_WORKING_DIR/{log} && ' \
        'cp /data1/woodcrob/sandpiper_{config[SANDPIPER_VERSION]}.sqlite3 /data1/woodcrob/sandpiper_{config[SANDPIPER_VERSION]}.sqlite3.after_start && ' \
        'touch $SNAKE_WORKING_DIR/{config[TEST_OR_PROD]}/{config[SANDPIPER_VERSION]}/backend_db/start_done'

rule add_tags_to_backend_db:
    input:
        '{test_or_prod}/{version}/backend_db/start_done'.format(
            test_or_prod=config['TEST_OR_PROD'],
            version=config['SANDPIPER_VERSION'])
    output:
        touch('{test_or_prod}/{version}/backend_db/done'.format(
            test_or_prod=config['TEST_OR_PROD'],
            version=config['SANDPIPER_VERSION']))
    log:
        '{test_or_prod}/{version}/backend_db/tags_backend_db.log'.format(
            test_or_prod=config['TEST_OR_PROD'],
            version=config['SANDPIPER_VERSION'])
    conda:
        '../sandpiper.yml'
    shell:
        'export SNAKE_WORKING_DIR=`pwd` && ' \
        'cd ../backend && ' \
        # cp to remain idempotent, e.g. if this step fails
        'cp /data1/woodcrob/sandpiper_{config[SANDPIPER_VERSION]}.sqlite3.after_start /data1/woodcrob/sandpiper_{config[SANDPIPER_VERSION]}.sqlite3 && ' \
        'PYTHONPATH=~/git/singlem TMPDIR=. ./bin/generate_backend_db --stage tags -o /data1/woodcrob/sandpiper_{config[SANDPIPER_VERSION]}.sqlite3 2> $SNAKE_WORKING_DIR/{log} && ' \
        'cp /data1/woodcrob/sandpiper_{config[SANDPIPER_VERSION]}.sqlite3 db/'

# rule add_smf_to_backend_db:
#     input:
#         '{test_or_prod}/{version}/backend_db/tags_done'.format(
#             test_or_prod=config['TEST_OR_PROD'],
#             version=config['SANDPIPER_VERSION'])
#     output:
#         touch('{test_or_prod}/{version}/backend_db/done'.format(
#             test_or_prod=config['TEST_OR_PROD'],
#             version=config['SANDPIPER_VERSION']))
#     log:
#         '{test_or_prod}/{version}/backend_db/smf_backend_db.log'.format(
#             test_or_prod=config['TEST_OR_PROD'],
#             version=config['SANDPIPER_VERSION'])
#     conda:
#         '../sandpiper.yml'
#     shell:
#         'export SNAKE_WORKING_DIR=`pwd` && ' \
#         'cd ../backend && ' \
#         # cp to remain idempotent, e.g. if this step fails
#         'cp /data1/woodcrob/sandpiper_{config[SANDPIPER_VERSION]}.sqlite3.after_tags /data1/woodcrob/sandpiper_{config[SANDPIPER_VERSION]}.sqlite3 && ' \
#         'PYTHONPATH=~/git/singlem TMPDIR=. ./bin/generate_backend_db --stage smf --smf-file {config[SMF_FILE]} -o /data1/woodcrob/sandpiper_{config[SANDPIPER_VERSION]}.sqlite3 2> $SNAKE_WORKING_DIR/{log} && ' \
#         'cp /data1/woodcrob/sandpiper_{config[SANDPIPER_VERSION]}.sqlite3 db/'
